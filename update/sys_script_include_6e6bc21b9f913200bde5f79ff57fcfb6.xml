<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58872_needit.NeedItUtils</api_name>
        <client_callable>false</client_callable>
        <description>Utils Script Include for the NeedIt application.</description>
        <name>NeedItUtils</name>
        <script><![CDATA[var NeedItUtils = Class.create();
NeedItUtils.prototype = {
    initialize: function() {
    },
	isDatePast: function(strDate){
		// Create GlideDateTime objects for the current date and the passed in date
		var rightnow = new GlideDateTime();
		var testdate = new GlideDateTime(strDate);
		
		// If the testdate is before rightnow, return true, else return false
		if (testdate.before(rightnow)) {
			return true;
		}
		else {
			return false;
		}
	},
		isDateToday: function(strDate){
		
		// Create GlideDateTime objects for the current date and the passed in date
		var rightnow = new GlideDateTime();
		var testdate = new GlideDateTime(strDate);
		// Get the date portion of rightnow and testdate (no timestamp)
		var today = rightnow.getLocalDate();
		var istoday = testdate.getLocalDate();
	
		// Compare today and istoday to see if they are the same day
		if(today.compareTo(istoday) == 0){
			return true;
		}
		else {
			return false;
		}
	},
	cjk123: function(){
		return 'cjk123';
	},
	printOverdueNeedItTaskAndEvent: function(){
		var niEvent = new GlideRecord('x_58872_needit_needit_task');
		var result = [];
		niEvent.addQuery('due_date','<',new GlideDateTime());
		niEvent.query();
		while(niEvent.next()){
			result.push(niEvent.number);
			gs.eventQueue('x_58872_needit.OverdueNeedItEvent',niEvent,niEvent.number, gs.getUserDisplayName(), 'needit_queue');
		}
		if (result.length > 0)
			gs.info('wbo overdue NeedIt Task: ' + result.join(','));
	},
	printSoonOverdueNeedItTaskAndEvent: function(){
		var niEvent = new GlideRecord('x_58872_needit_needit_task');
		var result = [];
		niEvent.addQuery('due_date','>',new GlideDateTime());
		niEvent.addQuery('due_date','<',gs.hoursAgo(-24));
		niEvent.query();
		while(niEvent.next()){
			result.push(niEvent.number);
			gs.eventQueue('x_58872_needit.SoonOverdueNeedItEvent',niEvent,niEvent.number, gs.getUserDisplayName(), 'needit_queue');
		}
		if (result.length > 0)
			gs.info('wbo soon overdue NeedIt Task: ' + result.join(','));
	},
	soonOverdueNeedIt: function(){
		var niRecords = [];
		var now = new GlideDateTime();
		var rec = new GlideRecord('x_58872_needit_needit');
		rec.addQuery('u_when_needed','>',now);
		rec.addQuery('u_when_needed','<',gs.hoursAgo(-24));
		rec.query();
		while(rec.next()){
			niRecords.push('' + rec.number);
		}
		
		return niRecords;
	}, 
    type: 'NeedItUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-03-09 21:52:03</sys_created_on>
        <sys_id>6e6bc21b9f913200bde5f79ff57fcfb6</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>NeedItUtils</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_6e6bc21b9f913200bde5f79ff57fcfb6</sys_update_name>
        <sys_updated_by>wojciech.bonk</sys_updated_by>
        <sys_updated_on>2018-07-25 08:20:38</sys_updated_on>
    </sys_script_include>
</record_update>
